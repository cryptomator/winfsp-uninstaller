#include <Windows.h>
#include <Msi.h>

#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <string>

#pragma comment(lib, "msi.lib")


/*
    Executable to uninstall the WinFSP 1.x driver.

    Parameters:
    -q: Quiet mode, skips confirmation dialog

    Return values are:
    0: WinFSP 1.x driver uninstalled successfully
    1: WinFSP 1.x driver not found, nothing happend
    2: WinFSP 1.x driver uninstallation failed
    3: User aborted uninstallation
*/
int main(const int argc, char* argv[])
{
    //check arguments for quiet flag, skipping confirmation dialog
    std::string quietFlag = "-q";
    if (argc <= 1 || quietFlag.compare(argv[1]) != 0) {
        //create alert dialog with OK and cancel button
        int answer = MessageBox(NULL, L"Cryptomator requires a newer version of the WinFsp driver. The installer will now uninstall WinFsp, reboot, and afterwards proceed with this installation.\n\nDo you want to continue?", L"Cryptomator Installer", MB_OKCANCEL | MB_ICONQUESTION | MB_TASKMODAL);
        //generated by copilot
        if (answer != IDOK) {
            return 3;
        }
    }

    //search product code with upgrade code
    WCHAR code[39];
    UINT result = MsiEnumRelatedProductsW(L"{82F812D9-4083-4EF1-8BC8-0F1EDA05B46B}", 0, 0, code);
    if (result == ERROR_NO_MORE_ITEMS) {
        //product not found
        return 1;
    }
    else if (result != ERROR_SUCCESS) {
        //error
        return 2;
    }

    //disable UI
    MsiSetInternalUI((INSTALLUILEVEL)(INSTALLUILEVEL_NONE | INSTALLUILEVEL_UACONLY), NULL);
    //uninstall product
    result = MsiConfigureProductExW(code, INSTALLLEVEL_DEFAULT, INSTALLSTATE_ABSENT, NULL);
    if (result == ERROR_SUCCESS) {
        return 0;
    }
    else {
        return 2;
    }
}